import * as PIXI from 'pixi.js';
import { FONT_FAMILY } from '../constants/gameConstants';

class GameOverScene {
  constructor(app, gameManager) {
    this.app = app;
    this.gameManager = gameManager;
    this.victory = false;
    
    // Create container
    this.container = new PIXI.Container();
    this.container.visible = false;
    app.stage.addChild(this.container);
    
    // Create background overlay
    this.background = new PIXI.Graphics();
    this.container.addChild(this.background);
    
    // Create panel
    this.panel = new PIXI.Graphics();
    this.container.addChild(this.panel);
    
    // Create title text
    this.titleText = new PIXI.Text('Game Over', {
      fontFamily: FONT_FAMILY,
      fontSize: 32,
      fill: 0xFFFFFF,
      fontWeight: 'bold',
      align: 'center',
      dropShadow: true,
      dropShadowColor: 0x000000,
      dropShadowDistance: 2
    });
    this.titleText.anchor.set(0.5, 0);
    this.container.addChild(this.titleText);
    
    // Create result text
    this.resultText = new PIXI.Text('', {
      fontFamily: FONT_FAMILY,
      fontSize: 24,
      fill: 0xFF0000, // Will be updated based on victory/defeat
      align: 'center',
      fontWeight: 'bold',
      dropShadow: true,
      dropShadowColor: 0x000000,
      dropShadowDistance: 1
    });
    this.resultText.anchor.set(0.5, 0);
    this.container.addChild(this.resultText);
    
    // Create score text
    this.scoreText = new PIXI.Text('', {
      fontFamily: FONT_FAMILY,
      fontSize: 20,
      fill: 0x3A8EE6,
      align: 'center',
      fontWeight: 'bold'
    });
    this.scoreText.anchor.set(0.5, 0);
    this.container.addChild(this.scoreText);
    
    // Create retry button
    this.retryButton = this.createButton('Play Again', () => {
      this.gameManager.startGame(this.gameManager.getDifficulty());
    });
    this.container.addChild(this.retryButton);
    
    // Create menu button
    this.menuButton = this.createButton('Main Menu', () => {
      this.gameManager.showMenu();
    });
    this.container.addChild(this.menuButton);
    
    // Position elements
    this.resize(app.screen.width, app.screen.height);
  }
  
  createButton(text, onClick) {
    const button = new PIXI.Container();
    button.interactive = true;
    button.buttonMode = true;
    
    // Button background
    const bg = new PIXI.Graphics();
    bg.beginFill(0x3A8EE6);
    bg.drawRoundedRect(-80, -20, 160, 40, 8);
    bg.endFill();
    button.addChild(bg);
    
    // Button text
    const buttonText = new PIXI.Text(text, {
      fontFamily: FONT_FAMILY,
      fontSize: 18,
      fill: 0xFFFFFF,
      fontWeight: 'bold',
      align: 'center'
    });
    buttonText.anchor.set(0.5);
    button.addChild(buttonText);
    
    // Add hover effects
    button.on('pointerover', () => {
      bg.tint = 0xAAAAAA;
    });
    
    button.on('pointerout', () => {
      bg.tint = 0xFFFFFF;
    });
    
    // Add click handler
    button.on('pointerdown', onClick);
    
    return button;
  }
  
  setResults(score, victory) {
    this.score = score;
    this.victory = victory;
    
    // Update text based on victory/defeat
    if (victory) {
      this.resultText.text = 'VICTORY!';
      this.resultText.style.fill = 0x4CAF50; // Green
    } else {
      this.resultText.text = 'DEFEAT!';
      this.resultText.style.fill = 0xF44336; // Red
    }
    
    this.scoreText.text = `Score: ${score} walls placed`;
  }
  
  show() {
    this.container.visible = true;
    this.resize(this.app.screen.width, this.app.screen.height);
  }
  
  hide() {
    this.container.visible = false;
  }
  
  handleClick(x, y) {
    // Clicks are handled by the button event handlers
  }
  
  resize(width, height) {
    // Update background
    this.background.clear();
    this.background.beginFill(0x000000, 0.5);
    this.background.drawRect(0, 0, width, height);
    this.background.endFill();
    
    // Position elements
    const centerX = width / 2;
    const centerY = height / 2;
    
    // Update panel
    this.panel.clear();
    this.panel.beginFill(0x000000, 0.8);
    this.panel.drawRoundedRect(centerX - 175, centerY - 150, 350, 300, 10);
    this.panel.endFill();
    
    this.titleText.position.set(centerX, centerY - 130);
    this.resultText.position.set(centerX, centerY - 80);
    this.scoreText.position.set(centerX, centerY - 20);
    
    this.retryButton.position.set(centerX, centerY + 40);
    this.menuButton.position.set(centerX, centerY + 100);
  }
}

export default GameOverScene;